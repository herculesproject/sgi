name: SGI EER Service

on: 
  workflow_dispatch: 
  push:
    paths: 
      - 'sgi-eer-service/**'
      - '.github/workflows/sgi-eer-service.yml'
    branches:
      - ci

defaults:
  run:
    working-directory: sgi-eer-service

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Compile
      run: mvn -B compile

    - name: Start-up SGI-Auth for Tests
      run: docker run --rm --name sgi-auth 
        -e KEYCLOAK_USER=test 
        -e KEYCLOAK_PASSWORD=test 
        -e PROXY_ADDRESS_FORWARDING=true 
        -e KEYCLOAK_IMPORT=/realm/sgi-realm.json 
        -p 8080:8080 
        -d herculesproject/sgi-auth:0.6.0-SNAPSHOT

    - name: Start-up PostgreSQL for Tests
      run: docker run --rm --name postgres 
        -e POSTGRES_USER=postgres 
        -e POSTGRES_PASSWORD=admin 
        -e POSTGRES_DB=db 
        -p 5432:5432 
        -d postgres:12
    
    - name: Wait for 30 seconds
      run: sleep 30s
      shell: bash

    - name: Test
      run: mvn -B test -Dspring.profiles.active=test-postgres 
        -Dspring.datasource.url=jdbc:postgresql://localhost:5432/db 
        -Dspring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/auth/realms/sgi
    
    - name: Stop PostgreSQL for Test
      run: docker stop postgres

    - name: Start-up PostgreSQL for Integration Tests
      run: docker run --rm --name postgres 
        -e POSTGRES_USER=postgres 
        -e POSTGRES_PASSWORD=admin 
        -e POSTGRES_DB=db 
        -p 5432:5432 
        -d postgres:12

    - name: Wait for 30 seconds
      run: sleep 30s
      shell: bash
    
    - name: Integration Test
      run: mvn -B post-integration-test failsafe:verify 
        -DskipUnitTests 
        -Dspring.profiles.active=test-postgres 
        -Dspring.datasource.url=jdbc:postgresql://localhost:5432/db 
        -Dspring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/auth/realms/sgi

    - name: Stop PostgreSQL for Integration tests
      run: docker stop postgres
    
    - name: Stop SGI-Auth for tests
      run: docker stop sgi-auth

    - name: SonarQube analysis
      run: mvn -B verify -DskipTests sonar:sonar
        -Dsonar.host.url=https://sonarcloud.io  
        -Dsonar.organization=herculesproject
        -Dsonar.projectKey=herculesproject_sgi_eer-service
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        -Dsonar.branch.name=main
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Prepare docker build
      id: prepare-build
      run: |
        mkdir target/dependency
        (cd target/dependency; unzip ../*-exec.jar)
        echo "VERSION=$(cat target/dependency/META-INF/build-info.properties | grep build.version | cut -d'=' -f2)" >> $GITHUB_OUTPUT

    - name: Extract metadata (tags, labels) for Docker
      id: docker-metadata
      uses: docker/metadata-action@v5
      with:
        images: herculesproject/sgi-eer-service
        labels: |
          org.opencontainers.image.title=sgi-eer-service
        tags: |
          type=semver,pattern={{version}},value=${{ steps.prepare-build.outputs.VERSION }}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: "./sgi-eer-service"
        push: true
        tags: ${{ steps.docker-metadata.outputs.tags }}
        labels: ${{ steps.docker-metadata.outputs.labels }}

    - name: Set up JDK to deploy on Central
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Deploy to Central
      run: mvn -B deploy -P deployToCentral -DskipTests
      env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  
