name: SGI USR Service

on: 
  workflow_dispatch: 
  push:
    paths: 
      - 'sgi-usr-service/**'
      - '.github/workflows/sgi-usr-service.yml'
    branches:
      - ci

defaults:
  run:
    working-directory: sgi-usr-service

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    
    - name: Compile
      run: mvn -B compile

    - name: Start-up PostgreSQL for Tests
      run: docker run --rm --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=admin -e POSTGRES_DB=db -p 5432:5432 -d postgres:12
    
    - name: Test
      run: mvn -B test -Dspring.profiles.active=test-postgres
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/db
    
    - name: Stop PostgreSQL for Test
      run: docker stop postgres

    - name: Start-up PostgreSQL for Integration Tests
      run: docker run --rm --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=admin -e POSTGRES_DB=db -p 5432:5432 -d postgres:12

    - name: Integration Test
      run: mvn -B post-integration-test failsafe:verify -DskipUnitTests -Dspring.profiles.active=test-postgres
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/db

    - name: Stop PostgreSQL for Integration tests
      run: docker stop postgres

    - name: Merge coverage
      run: mvn -B verify -DskipTests

    - name: SonarQube analysis
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      with:
        projectBaseDir: sgi-usr-service
        args: >
          -Dsonar.organization=herculesproject
          -Dsonar.projectKey=herculesproject_sgi_usr-service
          -Dsonar.sources=src/main/java
          -Dsonar.tests=src/test/java
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          -Dsonar.java.binaries=target/classes
          -Dsonar.branch.name=main
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Prepare docker build
      id: prepare-build
      run: |
        mkdir target/dependency
        (cd target/dependency; unzip ../*-exec.jar)
        echo "VERSION=$(cat target/dependency/META-INF/build-info.properties | grep build.version | cut -d'=' -f2)" >> $GITHUB_OUTPUT

    - name: Extract metadata (tags, labels) for Docker
      id: docker-metadata
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: herculesproject/sgi-usr-service
        tags: |
          type=semver,pattern={{version}},value=${{ steps.prepare-build.outputs.VERSION }}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.docker-metadata.outputs.tags }}
        labels: ${{ steps.docker-metadata.outputs.labels }}

    - name: Set up JDK to deploy on Central
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Deploy to Central
      run: mvn -B deploy -P deployToCentral -DskipTests
      env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  
