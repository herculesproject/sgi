<?xml version="1.0" encoding="UTF-8"?>
<api context="/sgdoc" name="API-SGDOC" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="GET" url-mapping="/documentos">
        <inSequence>
            <call-template target="conf:sequence-templates/find-all-in-sequence-template.xml">
                <with-param name="endpoint" value="sgdoc-endpoint"/>
            </call-template>
        </inSequence>
        <outSequence>
            <sequence key="conf:sequences/find-all-out-sequence.xml"/>
        </outSequence>
        <faultSequence/>
    </resource>
    <resource methods="POST" url-mapping="/documentos">
        <inSequence>
            <property name="uuid" expression="fn:substring-after(get-property('MessageID'),'uuid:')" scope="default" type="STRING"/>
            <property name="fileStorePath" expression="get-property('fileStorePath')" scope="default" type="STRING" />

            <propertyGroup description="file">
                <property name="fileContent" expression="//mediate/archivo" scope="default" type="STRING"/>
                <property name="fileName" expression="//mediate/archivo/@filename" scope="default" type="STRING"/>
                <property name="fileContentType" expression="//mediate/archivo/@content-type" scope="default" type="STRING"/>
            </propertyGroup>

            <log level="custom">
                <property name="fileName" expression="get-property('fileName')" />
                <property name="fileContentType" expression="get-property('fileContentType')" />
                <property name="uuid" expression="get-property('uuid')" />
            </log>

            <script description="GenerateRelativeFilePathMediator" key="gov:scripts/sgdoc/generate-relative-file-path-mediator.js" language="js"/>

            
            <!-- Crea el fichero-->
            <fileconnector.create>
                <filePath>{fn:concat(get-property('fileStorePath'), get-property('relativeFilePath'))}</filePath>
                <inputContent>{$ctx:fileContent}</inputContent>
                <isBinaryContent>true</isBinaryContent>
            </fileconnector.create>

            <!-- Guarda en BD el documento -->
            <payloadFactory media-type="json">
                <format>
                    {
                      "nombre": "$1",
                      "archivo": "$2",
                      "version": "1",
                      "tipo": "$3",
                      "autorRef": "anonymous"
                    }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('fileName')"/>
                    <arg evaluator="xml" expression="get-property('relativeFilePath')"/>
                    <arg evaluator="xml" expression="get-property('fileContentType')"/>
                </args>
            </payloadFactory>

            <script description="TransformInputObjectMediator" key="conf:scripts/transform-input-object-mediator.js" language="js"/>

            <send>
                <endpoint key="sgdoc-endpoint"/>
            </send>
        </inSequence>
        <outSequence>
            <sequence key="conf:sequences/find-one-out-sequence.xml"/>
        </outSequence>
        <faultSequence/>
    </resource>
    <resource methods="GET" uri-template="/documentos/bydocumentorefs/{ids}">
        <inSequence>
            <property name="ids" expression="get-property('uri.var.ids')" scope="default" type="STRING"/>
            <script description="FindAllByIdsMediator" key="conf:scripts/find-all-by-ids-mediator.js" language="js"/>
            <propertyGroup description="path + filterQuery">
                <property name="REST_URL_POSTFIX" scope="axis2" type="STRING" value="/documentos"/>
                <property expression="fn:concat(get-property('axis2','REST_URL_POSTFIX'), fn:concat('?filterQuery=', get-property('filterQuery')))" name="REST_URL_POSTFIX" scope="axis2" type="STRING"/>
                <property expression="fn:concat(get-property('axis2','REST_URL_POSTFIX'), fn:concat('&amp;sortQuery=', get-property('sortQuery')))" name="REST_URL_POSTFIX" scope="axis2" type="STRING"/>
                <property expression="fn:concat(get-property('axis2','REST_URL_POSTFIX'), fn:concat('&amp;paginationQuery=', get-property('paginationQuery')))" name="REST_URL_POSTFIX" scope="axis2" type="STRING"/>
            </propertyGroup>
            <send>
                <endpoint key="sgdoc-endpoint"/>
            </send>
        </inSequence>
        <outSequence>
            <sequence key="conf:sequences/find-all-out-sequence.xml"/>
        </outSequence>
        <faultSequence/>
    </resource>
    <resource methods="GET" uri-template="/documentos/{id}">
        <inSequence>
            <header name="Accept" scope="transport" value="application/json"/>
            <property name="id" expression="get-property('uri.var.id')" scope="default" type="STRING"/>
            <send>
                <endpoint key="sgdoc-endpoint"/>
            </send>
        </inSequence>
        <outSequence>
            <sequence key="conf:sequences/find-one-out-sequence.xml"/>
        </outSequence>
        <faultSequence/>
    </resource>
    <resource methods="GET" uri-template="/documentos/{id}/archivo">
        <inSequence>
            <header name="Accept" scope="transport" value="application/json"/>

            <property name="id" expression="get-property('uri.var.id')" scope="default" type="STRING"/>
            <property name="fileStorePath" expression="get-property('fileStorePath')" scope="default" type="STRING" />

            <!-- Recupera la ruta del archivo -->
            <call blocking="true">
                <endpoint key="sgdoc-endpoint"/>
            </call>

            <script description="GetRelativeFilePathMediator" key="gov:scripts/sgdoc/get-relative-file-path-mediator.js" language="js"/>

            <!-- Recupera el archivo -->
            <switch source="get-property('relativeFilePath')">
                <case regex="undefined">
                    <property name="fileExist" value="false" scope="default" type="STRING" />
                </case>
                <default>
                    <fileconnector.isFileExist>
                        <source>{fn:concat(get-property('fileStorePath'), get-property('relativeFilePath'))}</source>
                    </fileconnector.isFileExist>
                    <property name="fileExist"  expression="json-eval($.fileExist)" scope="default" type="STRING"/>
                </default>
            </switch>

            <log level="custom">
                <property name="fileExist" expression="get-property('fileExist')" />
            </log>

            <switch source="get-property('fileExist')">
                <case regex="true">
                    <payloadFactory media-type="xml">
                        <format>
                            <ns:binary xmlns:ns="http://ws.apache.org/commons/ns/payload"/>
                        </format>
                        <args/>
                    </payloadFactory>

                    <fileconnector.read>
                        <source>{fn:concat(get-property('fileStorePath'), get-property('relativeFilePath'))}</source>
                    </fileconnector.read>

                    <property name="messageType" scope="axis2" type="STRING" value="application/octet-stream"/>
                </case>
                <default>
                    <property name="HTTP_SC" scope="axis2" type="STRING" value="404"/>
                </default>
            </switch>

            <respond/>
        </inSequence>
        <outSequence>
            <sequence key="conf:sequences/find-one-out-sequence.xml"/>
        </outSequence>
        <faultSequence/>
    </resource>
    <resource methods="DELETE" uri-template="/documentos/{id}">
        <inSequence>
            <header name="Accept" value="application/json" scope="transport" />

            <property name="id" expression="get-property('uri.var.id')" scope="default" type="STRING"/>
            <property name="path" expression="$axis2:REST_URL_POSTFIX" scope="default" type="STRING"/>
            <property name="fileStorePath" expression="get-property('fileStorePath')" scope="default" type="STRING" />


            <!-- Recupera la ruta del archivo -->
            <property name="HTTP_METHOD" scope="axis2" type="STRING" value="GET"/>
            <property description="pathGetArchivo" name="REST_URL_POSTFIX" expression="fn:concat(get-property('path'),'/archivo')" scope="axis2" type="STRING"/>
            
            <log level="custom">
                <property name="pathGetArchivo" expression="$axis2:REST_URL_POSTFIX" />
            </log>

            <call blocking="true">
                <endpoint key="sgdoc-endpoint"/>
            </call>

            <script description="GetRelativeFilePathMediator" key="gov:scripts/sgdoc/get-relative-file-path-mediator.js" language="js"/>


            <!-- Elimina el archivo y el registro de BD -->
            <switch source="get-property('relativeFilePath')">
                <case regex="undefined">
                    <property name="fileExist" value="false" scope="default" type="STRING" />
                </case>
                <default>
                    <fileconnector.isFileExist>
                        <source>{fn:concat(get-property('fileStorePath'), get-property('relativeFilePath'))}</source>
                    </fileconnector.isFileExist>
                    <property name="fileExist" expression="json-eval($.fileExist)" scope="default" type="STRING"/>
                </default>
            </switch>

            <log level="custom">
                <property name="fileExist" expression="get-property('fileExist')" />
            </log>

            <switch source="get-property('fileExist')">
                <case regex="true">
                    <!-- Elimina el archivo -->
                    <fileconnector.delete>
                        <source>{fn:concat(get-property('fileStorePath'), get-property('relativeFilePath'))}</source>
                    </fileconnector.delete>

                    <!-- Elimina el documento -->
                    <property name="HTTP_METHOD" value="DELETE" scope="axis2" type="STRING" />
                    <property description="pathDelete" name="REST_URL_POSTFIX" expression="get-property('path')" scope="axis2" type="STRING"/>

                    <call blocking="true">
                        <endpoint key="sgdoc-endpoint"/>
                    </call>
                    <property name="HTTP_SC" scope="axis2" type="STRING" value="204"/>
                </case>
                <default>
                    <property name="HTTP_SC" value="404" scope="axis2" type="STRING" />
                </default>
            </switch>

            <respond/>
        </inSequence>
        <outSequence>
            <respond/>
        </outSequence>
        <faultSequence>
            <respond/>
        </faultSequence>
    </resource>
</api>
